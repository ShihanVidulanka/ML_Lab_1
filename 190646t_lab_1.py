# -*- coding: utf-8 -*-
"""190646T_Lab_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1etla5ZgND-VPAg-8GHMk8ASSgLn5N8r5

## *Lab 01*
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

plt.style.use("seaborn-whitegrid")

df = pd.read_csv("train.csv")
drop_df = df.drop(['label_2','label_3','label_4'], axis =1)
label_1_df = drop_df.dropna()
label_1_df.head()

X = label_1_df.copy()
y = X.pop("label_1")

# Label encoding for categoricals
for colname in X.select_dtypes("object"):
    X[colname], _ = X[colname].factorize()

# All discrete features should now have integer dtypes (double-check this before using MI!)
discrete_features = X.dtypes == int

from sklearn.feature_selection import mutual_info_regression

def make_mi_scores(X, y, discrete_features):
    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features)
    mi_scores = pd.Series(mi_scores, name="MI Scores", index=X.columns)
    mi_scores = mi_scores.sort_values(ascending=False)
    return mi_scores

mi_scores = make_mi_scores(X, y, discrete_features)
print(mi_scores)  # show a few features with their MI scores

def plot_mi_scores(scores):
    scores = scores.sort_values(ascending=True)
    width = np.arange(len(scores))
    ticks = list(scores.index)
    plt.barh(width, scores)
    plt.yticks(width, ticks)
    plt.title("Mutual Information Scores")


plt.figure(dpi=100, figsize=(8, 50))
plot_mi_scores(mi_scores)

features = label_1_df.drop('label_1', axis =1)
std_features = features.std()
plt.figure(dpi=100, figsize=(8, 50))
plot_mi_scores(std_features)

std_features_dict = dict(map(lambda i: ("feature_"+str(i+1), round(std_features[i],2)), range(len(std_features))))
std_features_sorted = dict(sorted(std_features_dict.items(), key=lambda item: item[1], reverse=True))
for u,v in std_features_sorted.items():
  print(u, ":", v)

varianve_features = features.var()
plt.figure(dpi=100, figsize=(8, 50))
plot_mi_scores(std_features)

varianve_features_dict = dict(map(lambda i: ("feature_"+str(i+1), round(varianve_features[i],2)), range(len(varianve_features))))
varianve_features_sorted = dict(sorted(varianve_features_dict.items(), key=lambda item: item[1], reverse=True))
for u,v in varianve_features_sorted.items():
  print(u, ":", v)

similar_std_features_sorted={}
for value in std_features_dict.values():
  similar_values = [k for k,v in std_features_dict.items() if float(v) == value]
  if len(similar_values) > 1 :   similar_std_features_sorted[value] = similar_values
for u,v in similar_std_features_sorted.items():
  print(u, ":", v)

similar_varianve_features_sorted={}
for value in varianve_features_dict.values():
  similar_values = [k for k,v in varianve_features_dict.items() if float(v) == value]
  if len(similar_values) > 1 :   similar_varianve_features_sorted[value] = similar_values
for u,v in similar_varianve_features_sorted.items():
  print(u, ":", v)